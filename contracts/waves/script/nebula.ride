{-# STDLIB_VERSION 3 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

#-------------------Constants---------------------------
let WAVES = "WAVES"

#-------------------Base functions----------------------
func getNumberByKey(key: String) = {
    match (getInteger(this, key)) {
        case v:Int => v
        case _ => 0
      } 
}
func getStringByKey(key: String) = {
    match (getString(this, key)) {
        case v:String => v
        case _ => ""
    }
}

func getStringByAddressAndKey(address: Address,key: String) = {
    match (getString(address, key)) {
        case v:String => v
        case _ => ""
    }
}

#-----------------------Key-----------------------------
let OraclesKey = "oracles"
let ConsulsKey = "consuls"
let GravityContractKey = "gravity_contract"
let BftCoefficientKey = "bft_coefficient"
let SubscriberAddressKey = "subscriber_address"

#-------------------Global vars-------------------------
let oracles = getStringByKey(OraclesKey).split(",")
let bftCoefficient = getNumberByKey(BftCoefficientKey)
let subscriberAddress = getStringByKey(SubscriberAddressKey)
let gracityContract = addressFromStringValue(getStringByKey(GravityContractKey))
let consuls = getStringByAddressAndKey(gracityContract, ConsulsKey).split(",")

func validateSign(hash: ByteVector, sign: String, oracle: String) = {
    if (sign != "nil") then 
        (if sigVerify(hash, fromBase58String(sign), fromBase58String(oracle)) then 1 else 0) 
    else 0
}
#-------------------Callable----------------------------
@Callable(i)
func confirmData(hash: ByteVector, signs: String) = {
    let signList = signs.split(",")
    let count = 
        validateSign(hash, signList[0], oracles[0]) 
        + validateSign(hash, signList[1], oracles[1]) 
        + validateSign(hash, signList[2], oracles[2]) 
        + validateSign(hash, signList[3], oracles[3]) 
        + validateSign(hash, signList[4], oracles[4]) 

    if count > bftCoefficient then {
        throw("invalid bft count")
    } else {
        WriteSet([
            DataEntry(toString(height), hash)
        ])
    }
}

@Verifier(i)
func sendData() = {
    match (i) {
        case in:InvokeScriptTransaction => 
            let v = match (in.args[0]) {
                case v:Int => v
                case _ => throw("invalid args[0] type")
            }
            let vHeight = match (in.args[1]) {
                case vHeight:Int => vHeight
                case _ => throw("invalid args[1] type")
            }
            if in.dApp != addressFromStringValue(subscriberAddress)
                then throw("invalid dapp address")
            else if getStringByKey(toString(vHeight)) == ""
                then throw("invalid height")
            else if(keccak256(toBytes(v)) != fromBase58String(getStringByKey(toString(vHeight))))
                then throw("invalid keccak256(value) " + toString(v))
            else 
                true
        case _ => true
      }
}

@Callable(i)
func setSortedOracles(newSortedOracles: String, stringSigns: String) = {
    let signs = stringSigns.split(",")
    let count = validateSign(keccak256(toBytes(newSortedOracles)), signs[0], consuls[0]) +
                validateSign(keccak256(toBytes(newSortedOracles)), signs[1], consuls[1]) +
                validateSign(keccak256(toBytes(newSortedOracles)), signs[2], consuls[2]) +
                validateSign(keccak256(toBytes(newSortedOracles)), signs[3], consuls[3]) +
                validateSign(keccak256(toBytes(newSortedOracles)), signs[4], consuls[4])

    if(count > bftCoefficient) 
        then throw("invalid bft count")
    else {  
        WriteSet([
            DataEntry(OraclesKey, newSortedOracles)
        ])
    }
}